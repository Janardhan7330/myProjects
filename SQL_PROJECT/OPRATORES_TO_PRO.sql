SELECT MENU_ID,MENU_NAME,MENU_PRICE,(MENU_PRICE+12)AS INCRE_PRICE FROM MENU WHERE MENU_ID=302;
SELECT*,(MENU_PRICE-10) AS DISCO FROM MENU WHERE MENU_ID IN (305,304);
SELECT MENU_ID,MENU_NAME,MENU_PRICE,(MENU_PRICE/1/4)AS 75_DISCOUNT FROM MENU WHERE MENU_ID=302;
SELECT MENU_ID,MENU_NAME,MENU_PRICE,(MENU_PRICE*2)AS DOUBLE_PRICE FROM MENU WHERE MENU_ID=310;

SELECT PAYMENT_ID,CUSTOMER_ID,PAYMENT_STATUS FROM PAYMENT WHERE CUSTOMER_ID<105 ;
SELECT CUSTOMER_ID,PAYMENT_STATUS FROM PAYMENT WHERE CUSTOMER_ID>106 ;
SELECT * FROM PAYMENT WHERE ORDER_ID<=202;
SELECT * FROM PAYMENT WHERE PAYMENT_DATETIME>=20210822;
SELECT * FROM PAYMENT WHERE CUSTOMER_ID=105 AND PAYMENT_METHOD IN('GOOGLE PAY','PAYPAL');
SELECT PAYMENT_ID,CUSTOMER_ID,ORDER_ID FROM PAYMENT WHERE PAYMENT_ID=102345678903;
SELECT PAYMENT_ID,TOTAL_AMOUNT,PAYMENT_METHOD FROM PAYMENT WHERE TOTAL_AMOUNT<>1000;
SELECT *,(TOTAL_AMOUNT<1000) AS LESSTHEN_1000_AMOUNT FROM PAYMENT;


SELECT CUSTOMER_NAME,CUSTOMER_ID  FROM CUSTOMER WHERE CUSTOMER_NAME='T JANARDHAN' AND  CUSTOMER_ID=101;
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=110 OR CUSTOMER_NAME='S KARTHIK';
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID IN (110,105,102);
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID IN (110,105,102) OR CUSTOMER_NAME='S KARTHIK';
SELECT CUSTOMER_NAME,CUSTOMER_EMAIL,CUSTOMER_PHONE FROM CUSTOMER WHERE CUSTOMER_ID NOT IN (110,105,102);
SELECT * FROM CUSTOMER WHERE NOT CUSTOMER_NAME ='K HARISH';
SELECT * FROM CUSTOMER WHERE NOT CUSTOMER_NAME IN ('D PRIYA','K HARISH','B VAMSI');
SELECT PAYMENT_ID,TOTAL_AMOUNT,ORDER_ID FROM PAYMENT WHERE CUSTOMER_ID IN(103,101,105);
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID BETWEEN 105 AND 109 ;
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID NOT BETWEEN 105 AND 109 ;
SELECT * FROM CUSTOMER WHERE CUSTOMER_NAME LIKE 'S%';
SELECT * FROM CUSTOMER WHERE CUSTOMER_NAME LIKE '%A';
SELECT * FROM CUSTOMER WHERE CUSTOMER_NAME LIKE '__J%%N';
SELECT * FROM CUSTOMER WHERE CUSTOMER_NAME LIKE '__V_S__T_';
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID LIKE '%9';
select * from customer where customer_id= ANY(select customer_id from orders);
select * from orders where order_id> All(select order_id from menu);
SELECT CUSTOMER_NAME,CUSTOMER_ID FROM CUSTOMER WHERE EXISTS (SELECT ORDER_ID,ORDER_DATE FROM ORDERS WHERE CUSTOMER.CUSTOMER_ID=ORDERS.CUSTOMER_ID);
SELECT CUSTOMER_NAME,CUSTOMER_ID FROM CUSTOMER WHERE NOT EXISTS (SELECT ORDER_ID,ORDER_DATE FROM ORDERS WHERE CUSTOMER.CUSTOMER_ID=ORDERS.CUSTOMER_ID);



#  INNER joins
SELECT 
    MENU_NAME,MENU_PRICE,ORDER_QTY,(orders.order_qty * menu.menu_price) AS total 
FROM
    orders
        inner JOIN
    menu ON orders.order_id = menu.order_id  ;

# LEFT OUTER JOIN

SELECT ORDERS.CUSTOMER_ID,ORDERS.ORDER_ID,ORDER_DATE,PAYMENT.PAYMENT_ID,PAYMENT_METHOD
FROM 
ORDERS  LEFT JOIN PAYMENT
ON ORDERS.ORDER_ID=PAYMENT.ORDER_ID;

# RIGHT OUTER JOIN

SELECT MENU.MENU_ID,MENU.MENU_NAME,MENU.MENU_PRICE,ORDERS.CUSTOMER_ID,ORDERS.ORDER_ID,ORDER_DATE
FROM 
MENU RIGHT OUTER JOIN ORDERS
ON ORDERS.ORDER_ID=MENU.ORDER_ID;

# CARTISEAN JOIN
SELECT 
    ORDERS.CUSTOMER_ID,
    ORDERS.ORDER_ID,
    MENU.MENU_ID,
    MENU.MENU_NAME,
    MENU.MENU_PRICE
FROM
    ORDERS
        CROSS JOIN
    MENU
LIMIT 20;

#SELF JOIN 

SELECT T1.CUSTOMER_ID,T1.CUSTOMER_PHONE,T2.CUSTOMER_NAME,T2.CUSTOMER_EMAIL
FROM CUSTOMER T1,
	CUSTOMER T2
WHERE T1.CUSTOMER_ID=T2.CUSTOMER_ID;



# SUB QUERY


SELECT 
    CUSTOMER_ID,
    CUSTOMER_NAME,
    CUSTOMER_ADDRESS,
    (SELECT 
            ORDER_ID
        FROM
            ORDERS
        WHERE
            ORDERS.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID) AS ORDER_IDS
FROM
    CUSTOMER;
    
    
SELECT 
    *
FROM
    (SELECT 
        CUSTOMER_ID, CUSTOMER_NAME
    FROM
        CUSTOMER
    WHERE
        CUSTOMER.CUSTOMER_ID IN (102 , 101, 105)) AS NEWCOL;


SELECT 
    ORDER_QTY, ORDER_ID, CUSTOMER_ID
FROM
    ORDERS
WHERE
    ORDER_ID = (SELECT 
            ORDER_ID
        FROM
            CUSTOMER
        WHERE
            CUSTOMER_NAME = 'T JANARDHAN');


DELETE FROM ORDERS 
WHERE
    ORDER_QTY = (SELECT 
        CUSTOMER_ID
    FROM
        CUSTOMER
    
    WHERE
        CUSTOMER_ID = 102);

UPDATE ORDERS 
SET 
    ORDER_QTY = 6
WHERE
    CUSTOMER_ID = (SELECT 
            CUSTOMER_ID
        FROM
            CUSTOMER
        WHERE
            CUSTOMER_ID = 103);











CREATE TABLE TABLE1 (
    CUSTOMERNAME VARCHAR(30),
    ID_NO INT,
    LOCATION VARCHAR(30),
    PHONE_NUMBER decimal
);
INSERT INTO TABLE1 VALUES('Ram',101,'Chennai',9988775566);
INSERT INTO TABLE1 VALUES('Raj',102,'Coimbatore',8877665544);
INSERT INTO TABLE1 VALUES('Sasi',103,'Madurai',7766553344);
INSERT INTO TABLE1 VALUES('Ravi',104,'Salem',9988775511);
INSERT INTO TABLE1 VALUES('Sumathi',105,'Kanchipuram',9988558844);

SELECT * FROM TABLE1;

CREATE TABLE TABLE2 (
    WONERNAME VARCHAR(30),
    ID_NO INT,
    SECTION VARCHAR(30),
    PHONE_NUMBER decimal
);
INSERT INTO TABLE2 values('Ravi',104,'A',3516541350);
INSERT INTO TABLE2 values('Sumathi',105,'B',7854565780);
INSERT INTO TABLE2 values('RaJ',102,'A',4556897832);


SELECT * FROM TABLE1 UNION SELECT * FROM TABLE2;
SELECT * FROM TABLE1 UNION ALL SELECT * FROM TABLE2;
SELECT ID_NO,CUSTOMERNAME FROM TABLE1 INTERSECT SELECT ID_NO,WONERNAME FROM TABLE2;
SELECT * FROM TABLE1 EXCEPT SELECT * FROM TABLE2;

SELECT * FROM TABLE2;

DROP TABLE TABLE1;
DROP TABLE TABLE2;
            
            
            
#TRIGGERS#

# UPDATE

Delimiter //
		CREATE TRIGGER NEW_TRIGGER
		before  INSERT on PAYMENT
		for each row
		BEGIN
		 update ORDERS set ORDER_STATUS=(ORDER_STATUS+new.PAYMENT_STATUS)where ORDER_ID=ORDER_ID;
		END;

# DELETE
Delimiter //
		CREATE TRIGGER DEL_TRIGGER
		before  INSERT on ORDERS
		for each row
		BEGIN
		 delete from MENU where ORDER_ID=ORDER_ID;
		END;




